<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>英语作文整理</title>
    <link href="/2023/12/16/%E8%8B%B1%E8%AF%AD%E4%BD%9C%E6%96%87%E6%A8%A1%E6%9D%BF%E6%95%B4%E7%90%86/"/>
    <url>/2023/12/16/%E8%8B%B1%E8%AF%AD%E4%BD%9C%E6%96%87%E6%A8%A1%E6%9D%BF%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="一、议论文"><a href="#一、议论文" class="headerlink" title="一、议论文"></a>一、议论文</h2><h3 id="1-1作文范文"><a href="#1-1作文范文" class="headerlink" title="1.1作文范文"></a>1.1作文范文</h3><p><strong><u>With our society developing increasingly faster</u></strong>, people in growing numbers begin to realize that information technology plays a key role in education. Applying the state-of-the-art technology like online flatforms and smart classrooms renders teaching and learning more diverse and effective.<br> 随着社会发展速度越来越快，越来越多的人开始意识到信息技术在教育中起着关键作用。应用最先进的技术，如在线扁平化和智能教室，使教学和学习更加多样化和有效。</p><p><strong><u>There are a range of reasons accountable for my point of view.</u></strong> Firstly, information technology can alter college students learning mode. Compared with face-to-face classrooms, online teaching is more cost-effective, especially for those who live in the rural areas. Secondly, more freedom will be given to stu-dents. They can express their points of view through the online chat box in an anonymous way. Thirdly, they will pay more at-tention to autonomous learning with the help of various tools.<br> 我的观点有一系列原因。首先，信息技术可以改变大学生的学习模式。与面授课堂相比，在线教学更具成本效益，尤其是对于生活在农村地区的人来说。其次，将给予学生更多的自由。他们可以通过在线聊天框以匿名方式表达自己的观点。第三，他们将在各种工具的帮助下更加关注自主学习。</p><p><strong>In sum</strong>, information technology is of great necessity in educa tion. Not only does it help them enhance learning mode, but also enables to give them more freedom and enrich their life.<br>总而言之，信息技术在教育中具有重要意义。它不仅可以帮助他们增强学习模式，还可以给他们更多的自由，丰富他们的生活。</p><h3 id="1-2作文模板"><a href="#1-2作文模板" class="headerlink" title="1.2作文模板"></a>1.2作文模板</h3><h4 id="1-2-1首段"><a href="#1-2-1首段" class="headerlink" title="1.2.1首段"></a>1.2.1首段</h4><p><strong>首句</strong>：</p><p>1.with regard to sth,viewpoints vary vastly.</p><p><strong>次句：</strong></p><p>1.As far as I am concered,I am in line with argument&#x2F;view that…</p><h4 id="1-2-2次段"><a href="#1-2-2次段" class="headerlink" title="1.2.2次段"></a>1.2.2次段</h4><p>表达好：sth is tremendously beneficial &#x3D; sth exerts salutary impacts.</p><p>表达坏：sth is harmful&#x2F;detrimental &#x3D; sth imposes adverse impacts.</p><p><strong>陈述原因：</strong></p><p>1.There are a range of reasons accountable for my points of view…Firstly…secondly…thridly..</p><h4 id="1-2-3尾段"><a href="#1-2-3尾段" class="headerlink" title="1.2.3尾段"></a>1.2.3尾段</h4><p>In sum&#x2F;To sum up&#x2F;all in all&#x2F;In a nutshell</p><p>It is natural to reach the conclusion that</p>]]></content>
    
    
    <categories>
      
      <category>考研旅途</category>
      
    </categories>
    
    
    <tags>
      
      <tag>考研</tag>
      
      <tag>英语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++:STL和容器</title>
    <link href="/2023/11/17/cpp%20stl%E4%B8%8E%E5%AE%B9%E5%99%A8/"/>
    <url>/2023/11/17/cpp%20stl%E4%B8%8E%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="一、STL初识"><a href="#一、STL初识" class="headerlink" title="一、STL初识"></a>一、STL初识</h2><h3 id="1-1-STL基本概念"><a href="#1-1-STL基本概念" class="headerlink" title="1.1 STL基本概念"></a>1.1 STL基本概念</h3><p>STL广义上分为：容器，算法，迭代器。</p><p>容器和算法之间通过迭代器进行无缝衔接</p><p>STL几乎所有的代码都采用模板类代码或者模板函数</p><h3 id="1-2-STL六大组件"><a href="#1-2-STL六大组件" class="headerlink" title="1.2 STL六大组件"></a>1.2 STL六大组件</h3><p><strong>容器</strong>，<strong>算法</strong>，<strong>迭代器</strong>，<strong>仿函数</strong>，<strong>适配器</strong>，<strong>空间配置器</strong>。</p><h3 id="1-3-STL中容器、算法、迭代器"><a href="#1-3-STL中容器、算法、迭代器" class="headerlink" title="1.3 STL中容器、算法、迭代器"></a>1.3 STL中容器、算法、迭代器</h3><h4 id="1-3-1-容器：置物之所也"><a href="#1-3-1-容器：置物之所也" class="headerlink" title="1.3.1 容器：置物之所也"></a>1.3.1 <strong>容器</strong>：置物之所也</h4><p>STL容器就是将运用最广泛的一些数据结构实现出来</p><p>常用的数据结构：数组，链表，树，栈，队列，集合，映射等</p><p>分为序列式容器：强调值的排序，每个元素位置固定</p><p>关联式容器：二叉树结构，元素之间没有严格的物理上的顺序关系</p><h4 id="1-3-2-算法：问题之解法也"><a href="#1-3-2-算法：问题之解法也" class="headerlink" title="1.3.2 算法：问题之解法也"></a>1.3.2 <strong>算法</strong>：问题之解法也</h4><p>有限的步骤，解决逻辑或数学上的问题，叫做算法（Algorithms）。</p><p>算法分为：<strong>质变算法</strong>和<strong>非质变算法</strong>。</p><p>质变算法：运算过程中更改区间内的元素的内容，例如拷贝，替换，删除操作</p><p>非质变算法：是指运算过程中不会更改区间内的元素内容，例如查找替换，计数，遍历寻找极值。</p><p><strong>迭代器</strong>：容器和算法之间的粘合剂</p><p>每个容器都有自己的专属迭代器，它的使用类似指针。初学阶段可以先理解迭代器为指针。</p><p>迭代器的种类：</p><table><thead><tr><th>种类</th><th>功能</th><th>支持运算</th></tr></thead><tbody><tr><td>输入迭代器</td><td>对数据的只读访问</td><td>只读支持++、&#x3D;&#x3D;、！&#x3D;</td></tr><tr><td>输出迭代器</td><td>对数据的只写访问</td><td>只写，支持++</td></tr><tr><td>前向迭代器</td><td>读写操作，并能向前推进迭代器</td><td>读写，支持++、&#x3D;&#x3D;、！&#x3D;</td></tr><tr><td>双向迭代器</td><td>读写操作，并能向前和向后操作</td><td>读写，支持++、–</td></tr><tr><td>随机访问迭代器</td><td>读写操作，可以以跳跃的方式访问任意数据，功能最强的迭代器</td><td>读写，支持++、–、[n]、-n、&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;</td></tr></tbody></table><p>常用的容器中迭代器种类为双向迭代器和随机访问迭代器。</p><h2 id="二、容器算法迭代器初识"><a href="#二、容器算法迭代器初识" class="headerlink" title="二、容器算法迭代器初识"></a>二、容器算法迭代器初识</h2><h3 id="2-1vector存放内置数据类型"><a href="#2-1vector存放内置数据类型" class="headerlink" title="2.1vector存放内置数据类型"></a>2.1vector存放内置数据类型</h3><p>容器：vector</p><p>算法：for_each</p><p>迭代器：iterator</p><p>vector容器存放内置数据类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//创建vector容器，数组</span><br>    vector&lt;<span class="hljs-type">int</span>&gt;v;<br><br>    <span class="hljs-comment">//向容器中插入数据</span><br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br><br>    <span class="hljs-comment">//通过迭代器访问容器中的数据</span><br>    vector&lt;<span class="hljs-type">int</span>&gt;::iterator itBegin = v.<span class="hljs-built_in">begin</span>();<span class="hljs-comment">//起始迭代器 指向容器第一个元素</span><br>    vector&lt;<span class="hljs-type">int</span>&gt;::iterator itEnd = v.<span class="hljs-built_in">end</span>();<span class="hljs-comment">//结束迭代器，指向最后一个元素的下一个位置，并不是最后一个元素的位置</span><br><br>    <span class="hljs-comment">//第一种遍历方式</span><br>    <span class="hljs-keyword">while</span>(itBegin != itEnd)<br>    &#123;<br>        cout&lt;&lt;*itBegin&lt;&lt;endl;<br>        itBegin++;<br>    &#125;<br>    <span class="hljs-comment">//第二种遍历方式</span><br>    <span class="hljs-keyword">for</span>(vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = v.<span class="hljs-built_in">begin</span>();it!=v.<span class="hljs-built_in">end</span>();it++)&#123;<br>        cout&lt;&lt;*it&lt;&lt;endl;<br>    &#125;<br><br>    <span class="hljs-comment">//利用STL提供的标准算法 注意添加头文件 &lt;algorithm&gt;</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>利用回调使用foreach</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myprint</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>    cout&lt;&lt;val&lt;&lt;endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//创建vector容器，数组</span><br>    vector&lt;<span class="hljs-type">int</span>&gt;v;<br><br>    <span class="hljs-comment">//向容器中插入数据</span><br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">10</span>);<br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">20</span>);<br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">30</span>);<br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">40</span>);<br>    <span class="hljs-comment">//通过迭代器访问容器中的数据</span><br>    vector&lt;<span class="hljs-type">int</span>&gt;::iterator itBegin = v.<span class="hljs-built_in">begin</span>();<span class="hljs-comment">//起始迭代器 指向容器第一个元素</span><br>    vector&lt;<span class="hljs-type">int</span>&gt;::iterator itEnd = v.<span class="hljs-built_in">end</span>();<span class="hljs-comment">//结束迭代器，指向最后一个元素的下一个位置，并不是最后一个元素的位置</span><br>    for_each(v.<span class="hljs-built_in">begin</span>(),v.<span class="hljs-built_in">end</span>(),myprint);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>for_each</strong>定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"> <span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> _InputIterator, <span class="hljs-keyword">typename</span> _Function&gt;</span><br><span class="hljs-function">   _Function</span><br><span class="hljs-function">   <span class="hljs-title">for_each</span><span class="hljs-params">(_InputIterator __first, _InputIterator __last, _Function __f)</span></span><br><span class="hljs-function">   </span>&#123;<br>     <span class="hljs-comment">// concept requirements</span><br>     __glibcxx_function_requires(_InputIteratorConcept&lt;_InputIterator&gt;)<br>     __glibcxx_requires_valid_range(__first, __last);<br>     <span class="hljs-keyword">for</span> (; __first != __last; ++__first)<br>__f(*__first);<br>     <span class="hljs-keyword">return</span> __f; <span class="hljs-comment">// N.B. [alg.foreach] says std::move(f) but it&#x27;s redundant.</span><br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>first和last指定了范围，调用_f函数,默认_first为函数参数,并在每一次循环后执行++操作。指针指向下一个元素所在地址</p></blockquote><h2 id="三、实例练习"><a href="#三、实例练习" class="headerlink" title="三、实例练习"></a>三、实例练习</h2><h3 id="3-1-vector二维数组计算"><a href="#3-1-vector二维数组计算" class="headerlink" title="3.1 vector二维数组计算"></a>3.1 vector二维数组计算</h3><p>  矩阵相乘函数：<br>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br>vector&lt;vector&lt;<span class="hljs-type">double</span>&gt;&gt; <span class="hljs-built_in">matrix_multip</span>(vector&lt;vector&lt;<span class="hljs-type">double</span>&gt;&gt; A, vector&lt;vector&lt;<span class="hljs-type">double</span>&gt;&gt; B) <br>&#123;  <br>    vector&lt;vector&lt;<span class="hljs-type">double</span>&gt;&gt; <span class="hljs-built_in">result</span>(A.<span class="hljs-built_in">size</span>(), <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">double</span>&gt;(B[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>()));  <br>    <span class="hljs-keyword">if</span>(A[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>()!=B.<span class="hljs-built_in">size</span>())<br>    &#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;矩阵维度不对，无法计算&quot;</span>&lt;&lt;endl;  <br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>(); i++) &#123;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; B[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(); j++) &#123;  <br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; B.<span class="hljs-built_in">size</span>(); k++) &#123;  <br>                result[i][j] += A[i][k] * B[k][j];  <br>            &#125;  <br>        &#125;  <br>    &#125;   <br>    <span class="hljs-keyword">return</span> result;  <br>    &#125;<br>&#125;  <br></code></pre></td></tr></table></figure><br>计算BQBT</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Calculate_BQBT</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">double</span>&gt;&gt; B,vector&lt;vector&lt;<span class="hljs-type">double</span>&gt;&gt; Q)</span></span><br><span class="hljs-function"></span>&#123;<br>  vector&lt;vector&lt;<span class="hljs-type">double</span>&gt;&gt; <span class="hljs-built_in">BT</span>(B[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(),<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">double</span>&gt;(B.<span class="hljs-built_in">size</span>()));<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;B.<span class="hljs-built_in">size</span>();i++)<br>  &#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;B[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();j++)&#123;<br>          BT[j][i]=B[i][j];<br>      &#125;<br>  &#125;<br><br>  vector&lt;vector&lt;<span class="hljs-type">double</span>&gt;&gt; result = <span class="hljs-built_in">matrix_multip</span>(<span class="hljs-built_in">matrix_multip</span>(B, Q), BT);  <br><br>  <span class="hljs-comment">// 输出结果  </span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; result.<span class="hljs-built_in">size</span>(); i++) &#123;  <br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; result[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(); j++) &#123;  <br>          cout &lt;&lt; result[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <br>      &#125;  <br>      cout &lt;&lt; endl;  <br>  &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>主函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> n 3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> r 2</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><br><br>  vector&lt;vector&lt;<span class="hljs-type">double</span>&gt;&gt; <span class="hljs-built_in">matrix_multip</span>(vector&lt;vector&lt;<span class="hljs-type">double</span>&gt;&gt; A, vector&lt;vector&lt;<span class="hljs-type">double</span>&gt;&gt; B);<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Calculate_BQBT</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">double</span>&gt;&gt; B,vector&lt;vector&lt;<span class="hljs-type">double</span>&gt;&gt; Q)</span></span>;<br> <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span><br><span class="hljs-function"> </span>&#123;  <br>    <span class="hljs-comment">// 初始化B和Q矩阵  </span><br>    vector&lt;vector&lt;<span class="hljs-type">double</span>&gt;&gt; <span class="hljs-built_in">B</span>(r, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">double</span>&gt;(n));  <br>  <br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入&quot;</span> &lt;&lt; r &lt;&lt; <span class="hljs-string">&quot;行&quot;</span> &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot;列的矩阵B：&quot;</span> &lt;&lt; endl;  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; r; i++) &#123;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;  <br>            cin &gt;&gt; B[i][j];  <br>        &#125;  <br>    &#125; <br><br>    vector&lt;vector&lt;<span class="hljs-type">double</span>&gt;&gt; <span class="hljs-built_in">Q</span>(n,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">double</span>&gt;(n)); <br>    cout &lt;&lt; <span class="hljs-string">&quot;请输入&quot;</span> &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot;行&quot;</span> &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot;列的矩阵Q：&quot;</span> &lt;&lt; endl;  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;  <br>            cin &gt;&gt; Q[i][j];  <br>        &#125;  <br>    &#125;  <br><br>    <span class="hljs-built_in">Calculate_BQBT</span>(B,Q);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++爱心代码</title>
    <link href="/2023/11/14/C++%E5%AE%9E%E7%8E%B0%E7%88%B1%E5%BF%83%E4%BB%A3%E7%A0%81/"/>
    <url>/2023/11/14/C++%E5%AE%9E%E7%8E%B0%E7%88%B1%E5%BF%83%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="C-实现爱心代码"><a href="#C-实现爱心代码" class="headerlink" title="C++实现爱心代码"></a>C++实现爱心代码</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>兴趣是最好的老师，实践是最好的考试，学完基础知识就可以找一些简单的代码玩玩。画一个爱心代码送给自己喜欢的人（虽然作者单身），谁说理工男不懂浪漫（QAQ）</p><h3 id="爱心曲线方程"><a href="#爱心曲线方程" class="headerlink" title="爱心曲线方程"></a>爱心曲线方程</h3><p>$$<br>x^2+(5y&#x2F;4-\sqrt[2]{|x|} )&#x3D;1<br>$$</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">float</span> y=<span class="hljs-number">1.3</span>;y&gt;=<span class="hljs-number">-1.1</span>;y-=<span class="hljs-number">0.06</span>)&#123;<br>           <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">float</span> x=<span class="hljs-number">-1.1</span>;x&lt;=<span class="hljs-number">1.1</span>;x+=<span class="hljs-number">0.025</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(x*x+<span class="hljs-built_in">pow</span>(<span class="hljs-number">5.0</span>*y/<span class="hljs-number">4.0</span>-<span class="hljs-built_in">sqrt</span>(<span class="hljs-built_in">fabs</span>(x)),<span class="hljs-number">2</span>)<span class="hljs-number">-1</span>&lt;=<span class="hljs-number">0</span>)<br>            &#123;<br>                cout&lt;&lt;<span class="hljs-string">&#x27;*&#x27;</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                cout&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>;<br>        &#125;<br>        cout&lt;&lt;endl;<br>    &#125;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="输出形状"><a href="#输出形状" class="headerlink" title="输出形状"></a>输出形状</h3><p><a href="https://imgse.com/i/piY9XM6"><img src="https://z1.ax1x.com/2023/11/14/piY9XM6.png" alt="piY9XM6.png"></a></p>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PYTHON笔记</title>
    <link href="/2023/11/10/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/11/10/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="一、基础语法"><a href="#一、基础语法" class="headerlink" title="一、基础语法"></a>一、基础语法</h2><h3 id="1-基础数学函数"><a href="#1-基础数学函数" class="headerlink" title="1.基础数学函数"></a>1.基础数学函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#withNumber</span><br>num=-<span class="hljs-number">6</span><br><span class="hljs-built_in">print</span>(num)<br><span class="hljs-built_in">print</span>(floor(<span class="hljs-number">6</span>,<span class="hljs-number">2</span>))<span class="hljs-comment">#floor函数：剪切掉小数点后的数字</span><br><span class="hljs-built_in">print</span>(ceil(<span class="hljs-number">3.3</span>))<span class="hljs-comment">#ceil函数：直接直接进位</span><br><span class="hljs-built_in">print</span>(sqrt(<span class="hljs-number">36</span>))<span class="hljs-comment">#sqrt函数：求平方根</span><br></code></pre></td></tr></table></figure><h3 id="2-用户输入"><a href="#2-用户输入" class="headerlink" title="2.用户输入"></a>2.用户输入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter your name: &quot;</span>)<br>age = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter your age &quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello&quot;</span> + name + <span class="hljs-string">&quot;! You are &quot;</span> + age)<br><br><span class="hljs-comment">#SetupCal</span><br>num1=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter your first numer&quot;</span>)<br>num2=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter your second numer&quot;</span>)<br>result=<span class="hljs-built_in">float</span>(num1) + <span class="hljs-built_in">float</span>(num2)<span class="hljs-comment">#float:将其转换成浮点数</span><br><span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment">#填空游戏</span><br>color = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter a color: &quot;</span>)<br>plural_noun = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter a Plural_noun&quot;</span>)<br>celebrity = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter a celebrity: &quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Roses are &quot;</span> + color)<br><span class="hljs-built_in">print</span>(plural_noun + <span class="hljs-string">&quot; are blue &quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; I love &quot;</span> + celebrity )<br></code></pre></td></tr></table></figure><h3 id="3-列表"><a href="#3-列表" class="headerlink" title="3.列表"></a>3.列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">friends = [<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;Sam&quot;</span>, <span class="hljs-string">&quot;Joey&quot;</span>, <span class="hljs-string">&quot;Jim&quot;</span>, <span class="hljs-string">&quot;Wu&quot;</span>]<br><br><span class="hljs-built_in">print</span>(friends[<span class="hljs-number">1</span>])<span class="hljs-comment">#读取小标为1的数据</span><br><span class="hljs-built_in">print</span>(friends[<span class="hljs-number">1</span>:])<span class="hljs-comment">#从下标为1的数据开始读取</span><br><span class="hljs-built_in">print</span>(friends[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>])<span class="hljs-comment">#从下标为1的数据读取到下标为4的数据但不包括4</span><br><br><span class="hljs-comment">#列表的功能</span><br>friends = [<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-string">&quot;Sam&quot;</span>, <span class="hljs-string">&quot;Joey&quot;</span>, <span class="hljs-string">&quot;Jim&quot;</span>, <span class="hljs-string">&quot;Wu&quot;</span>]<br>luck_numbers = [<span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>]<br><span class="hljs-comment">#print(friends[1])</span><br><span class="hljs-comment">#print(friends[1:])</span><br><span class="hljs-comment">#print(friends[1:4])</span><br><span class="hljs-comment">#friends.extend(luck_numbers)</span><br>friends.append(<span class="hljs-string">&quot;Creed&quot;</span>)<span class="hljs-comment">#添加单个数据</span><br>friends.insert(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;Aili&quot;</span>)<span class="hljs-comment">#在第三个位置插入数据</span><br>friends.remove(<span class="hljs-string">&quot;Jim&quot;</span>)<span class="hljs-comment">#删除指定内容</span><br><span class="hljs-comment">#friends.clear()</span><br>friends.pop()<span class="hljs-comment">#删掉最后一个数据</span><br><span class="hljs-built_in">print</span>(friends)<br><span class="hljs-built_in">print</span>(friends.index(<span class="hljs-string">&quot;Wu&quot;</span>))<span class="hljs-comment">#输出指定元素下标</span><br><span class="hljs-built_in">print</span>(friends.count(<span class="hljs-string">&quot;Tom&quot;</span>))<span class="hljs-comment">#输出指定元素的数量</span><br>friends.sort()<span class="hljs-comment">#对元素进行升序排序</span><br><span class="hljs-built_in">print</span>(friends)<br>luck_numbers.reverse()<span class="hljs-comment">#将数据颠倒输出</span><br><span class="hljs-built_in">print</span>(luck_numbers)<br><br>friends2 = friends.copy()<span class="hljs-comment">#复制数据</span><br><span class="hljs-built_in">print</span>(friends2)<br></code></pre></td></tr></table></figure><h3 id="4-元组"><a href="#4-元组" class="headerlink" title="4.元组"></a>4.元组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">coordinates = (<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>)<span class="hljs-comment">#元组</span><br>coordinates[<span class="hljs-number">1</span>] = <span class="hljs-number">10</span><span class="hljs-comment">#错误无法更改数据</span><br><span class="hljs-built_in">print</span>(coordinates[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h4 id="4-1二者之间的区别"><a href="#4-1二者之间的区别" class="headerlink" title="4.1二者之间的区别"></a>4.1二者之间的区别</h4><p>Python中的列表和元组都是用来存储一组数据的数据类型，但它们有以下区别：</p><ol><li>列表是可变的，元组是不可变的。也就是说，列表中的元素可以被修改、添加或删除，而元组中的元素不能被修改。</li><li>列表使用方括号 [] 来表示，元组使用圆括号 () 来表示。</li><li>列表通常用于存储同类型的数据，而元组通常用于存储异构的数据。</li><li>列表的操作速度比元组慢，因为列表需要动态分配内存，而元组在创建后就不可修改，因此可以更快地访问。</li><li>列表可以作为函数的参数传递，而元组通常用于函数的返回值。</li></ol><p>总之，列表和元组都有各自的优缺点，应根据具体情况选择使用哪种数据类型。</p><h3 id="5-语法结构"><a href="#5-语法结构" class="headerlink" title="5.语法结构"></a>5.语法结构</h3><h4 id="5-1条件语句"><a href="#5-1条件语句" class="headerlink" title="5.1条件语句"></a>5.1条件语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">is_male = <span class="hljs-literal">True</span><br>is_tall = <span class="hljs-literal">False</span><br><span class="hljs-keyword">if</span> is_male <span class="hljs-keyword">and</span> is_tall:<span class="hljs-comment">#两者都为真</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You are a male or tall or both&quot;</span>)<br><span class="hljs-keyword">elif</span> is_male <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span>(is_tall):<span class="hljs-comment">#前为真，后为假</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You are a short male&quot;</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> (is_male) <span class="hljs-keyword">and</span>  is_tall:<span class="hljs-comment">#前为假后为真</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You  are not a male but are tall&quot;</span>)<br><span class="hljs-keyword">else</span>:<span class="hljs-comment">#both is false</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You neither male nor tall&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="5-2比较语句"><a href="#5-2比较语句" class="headerlink" title="5.2比较语句"></a>5.2比较语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">max_num</span>(<span class="hljs-params">num1,num2,num3</span>):<br>    <span class="hljs-keyword">if</span> num1 &gt;= num2 <span class="hljs-keyword">and</span> num1 &gt;=num3:<br>        <span class="hljs-keyword">return</span> num1<br>    <span class="hljs-keyword">elif</span> num2 &gt;= num1 <span class="hljs-keyword">and</span> num2 &gt;= num3:<br>        <span class="hljs-keyword">return</span> num2<br>    <span class="hljs-keyword">else</span>:<span class="hljs-keyword">return</span> num3<br><br><span class="hljs-built_in">print</span>(max_num(<span class="hljs-number">3</span>,<span class="hljs-number">49</span>,<span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure><h4 id="5-3建立计算器"><a href="#5-3建立计算器" class="headerlink" title="5.3建立计算器"></a>5.3建立计算器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#从用户处输入数据</span><br>num1 = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter first number: &quot;</span>))<br>op = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter operator: &quot;</span>)<span class="hljs-comment">#根据输入符号判断进行的运算</span><br>num2 = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter second number: &quot;</span>))<br><br><span class="hljs-keyword">if</span> op == <span class="hljs-string">&quot;+ &quot;</span>:<br>    <span class="hljs-built_in">print</span>(num1 + num2)<br><span class="hljs-keyword">elif</span> op ==<span class="hljs-string">&quot;-&quot;</span>:<br>    <span class="hljs-built_in">print</span>(num1 - num2)<br><span class="hljs-keyword">elif</span> op == <span class="hljs-string">&quot;/&quot;</span>:<br>    <span class="hljs-built_in">print</span>(num1/num2)<br><span class="hljs-keyword">elif</span> op == <span class="hljs-string">&quot;*&quot;</span>:<br>    <span class="hljs-built_in">print</span>(num1 * num2)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Invalid operator&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="5-4while循环"><a href="#5-4while循环" class="headerlink" title="5.4while循环"></a>5.4while循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">10</span>:<br>    <span class="hljs-built_in">print</span>(i)<br>    i +=<span class="hljs-number">1</span><br>    <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done with loop&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="5-5猜字游戏"><a href="#5-5猜字游戏" class="headerlink" title="5.5猜字游戏"></a>5.5猜字游戏</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">secret_word = <span class="hljs-string">&quot;giraffe&quot;</span><br>guess = <span class="hljs-string">&quot;&quot;</span><br>guess_count = <span class="hljs-number">0</span><br>guess_limit = <span class="hljs-number">3</span><br>out_of_guesses = <span class="hljs-literal">False</span><br><span class="hljs-keyword">while</span> guess != secret_word <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span>(out_of_guesses):<br>    <span class="hljs-keyword">if</span> guess_count &lt; guess_limit:<br>        guess = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter your guess: &quot;</span>)<br>        guess_count +=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        out_of_guesses = <span class="hljs-literal">True</span><br><span class="hljs-keyword">if</span> out_of_guesses:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Out of Guesses, YOU LOSE&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;You win!&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="6-建立字典"><a href="#6-建立字典" class="headerlink" title="6.建立字典"></a>6.建立字典</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">monthConversions = <br>&#123;<br><span class="hljs-string">&quot;Jan&quot;</span>: <span class="hljs-string">&quot;January&quot;</span>,<br><span class="hljs-string">&quot;Feb&quot;</span>: <span class="hljs-string">&quot;February&quot;</span>,<br><span class="hljs-string">&quot;Mar&quot;</span>: <span class="hljs-string">&quot;March&quot;</span>,<br>&#125;<br><br><span class="hljs-built_in">print</span>(monthConversions[<span class="hljs-string">&quot;Mar&quot;</span>])<br><span class="hljs-comment">#print(monthConversions.get(&quot;Mar&quot;))</span><br></code></pre></td></tr></table></figure><p>通过Mar关键字打印出March</p><h3 id="7-列表与嵌套循环"><a href="#7-列表与嵌套循环" class="headerlink" title="7.列表与嵌套循环"></a>7.列表与嵌套循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">number_grid = [<br>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],<br>[<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>],<br>[<span class="hljs-number">0</span>]<br>]<br><br><span class="hljs-comment">#print(number_grid[0][2])</span><br><br><span class="hljs-comment">#for row in number_grid:</span><br> <span class="hljs-comment">#   print(row)</span><br><br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> number_grid:<br>    <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> row:<br>        <span class="hljs-built_in">print</span>(col)<br></code></pre></td></tr></table></figure><h3 id="8-捕捉错误"><a href="#8-捕捉错误" class="headerlink" title="8.捕捉错误"></a>8.捕捉错误</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment">#Value = 10/0</span><br>    number = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter a number: &quot;</span>))<br>    <span class="hljs-built_in">print</span>(number)<br><span class="hljs-keyword">except</span> ZeroDivisionError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Divided by zero&quot;</span>)<span class="hljs-comment">#错误输入</span><br><span class="hljs-keyword">except</span> ValueError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;invalid input&quot;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="二、函数"><a href="#二、函数" class="headerlink" title="二、函数"></a>二、函数</h2><h3 id="1-函数基本声明调用"><a href="#1-函数基本声明调用" class="headerlink" title="1.函数基本声明调用"></a>1.函数基本声明调用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_Hi</span>(<span class="hljs-params">name</span>):<br>    &#123;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello User&quot;</span> + name)<br>    &#125;<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Top&quot;</span>)<br>say_Hi(<span class="hljs-string">&quot; Tom&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Buttom&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="2-return语句"><a href="#2-return语句" class="headerlink" title="2.return语句"></a>2.return语句</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cube</span>(<span class="hljs-params">num</span>):<br>   <span class="hljs-keyword">return</span> num*num*num<br>result = cube(<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h3 id="3-指数函数"><a href="#3-指数函数" class="headerlink" title="3.指数函数"></a>3.指数函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">raise_to_power</span>(<span class="hljs-params">base_num, pow_num</span>):<br>    result = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(pow_num):<br>        result = result * base_num<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-built_in">print</span>(raise_to_power(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>))<br><br><br></code></pre></td></tr></table></figure><h3 id="4-建立翻译"><a href="#4-建立翻译" class="headerlink" title="4.建立翻译"></a>4.建立翻译</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">translate</span>(<span class="hljs-params">phrase</span>):<span class="hljs-comment">#读入phrase字符串</span><br>    translate = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> phrase:<br>        <span class="hljs-keyword">if</span> letter.lower() <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;aeiou&quot;</span>:<br>            <span class="hljs-keyword">if</span> letter.isupper():<span class="hljs-comment">#判断大小写</span><br>                translate = translate + <span class="hljs-string">&quot;G&quot;</span><br>            <span class="hljs-keyword">else</span>:<br>                translate = translate + <span class="hljs-string">&quot;g&quot;</span><br>        <span class="hljs-keyword">else</span>:  <br>            translate = translate + letter<br>    <span class="hljs-keyword">return</span> translate<br><br><br><span class="hljs-built_in">print</span>(translate(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Enter a phrase: &quot;</span>)))<br></code></pre></td></tr></table></figure><h3 id="5-模块"><a href="#5-模块" class="headerlink" title="5.模块"></a>5.模块</h3><h4 id="5-1被调用模块"><a href="#5-1被调用模块" class="headerlink" title="5.1被调用模块"></a>5.1被调用模块</h4><p>useful_tools</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_file_ext</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">return</span> filename[filename[filename.index(<span class="hljs-string">&quot;.&quot;</span>) + <span class="hljs-number">1</span>]]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">putnum</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-keyword">return</span> num+<span class="hljs-number">10</span><br><span class="hljs-comment">#对输入进来的数进行加十操作</span><br></code></pre></td></tr></table></figure><h4 id="5-2调用"><a href="#5-2调用" class="headerlink" title="5.2调用"></a>5.2调用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> useful_tools<span class="hljs-comment">#调用useful_tools模块</span><br><br><span class="hljs-comment">#print(useful_tools.get_file_ext(&quot;bsjfsa&quot;))</span><br><span class="hljs-built_in">print</span>(useful_tools.putnum(<span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><h2 id="三、文件操作"><a href="#三、文件操作" class="headerlink" title="三、文件操作"></a>三、文件操作</h2><h3 id="1-读文件"><a href="#1-读文件" class="headerlink" title="1.读文件"></a>1.读文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">employee_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;pythonProject\\测试.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">print(employee_file.read())#读全部文件</span><br><span class="hljs-string">print(employee_file.readline())#读一行</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(employee_file.readlines())<span class="hljs-comment">#分成数组读出</span><br>employee_file.close()<br></code></pre></td></tr></table></figure><h3 id="2-写文件"><a href="#2-写文件" class="headerlink" title="2.写文件"></a>2.写文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">employee_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;pythonProject\\测试2.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br><br>employee_file.write(<span class="hljs-string">&quot;\nTobe,a man&quot;</span>)<br>employee_file.close()<br></code></pre></td></tr></table></figure><h2 id="四、类与对象"><a href="#四、类与对象" class="headerlink" title="四、类与对象"></a>四、类与对象</h2><h3 id="1-创建类"><a href="#1-创建类" class="headerlink" title="1.创建类"></a>1.创建类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, major, gpa, is_on_probation</span>):<br>        self.name = name<br>        self.major = major<br>        self.gpa = gpa<br>        self.is_on_probation = is_on_probation<br><span class="hljs-comment">#__init__是python指定的构造函数写法，self类似于c 中的this指针</span><br></code></pre></td></tr></table></figure><p>调用类创建对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Student <span class="hljs-keyword">import</span> Student<br><br>student1 = Student(<span class="hljs-string">&quot;Jim&quot;</span>, <span class="hljs-string">&quot;Business&quot;</span>, <span class="hljs-number">4.1</span>, <span class="hljs-literal">False</span>)<br>student2 = Student(<span class="hljs-string">&quot;Pam&quot;</span>, <span class="hljs-string">&quot;Art&quot;</span>, <span class="hljs-number">4.5</span>, <span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(student2.gpa)<br><span class="hljs-built_in">print</span>(student1.is_on_probation)<br></code></pre></td></tr></table></figure><h3 id="2-继承"><a href="#2-继承" class="headerlink" title="2.继承"></a>2.继承</h3><p>父类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chef</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_chicken</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Te chef makes a chicken&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_salad</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The chef makes a salad&quot;</span>)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_special_dish</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The chef make a special_dish&quot;</span>)<br></code></pre></td></tr></table></figure><p>子类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Chef <span class="hljs-keyword">import</span> Chef<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ChineseChef</span>(<span class="hljs-title class_ inherited__">Chef</span>):<br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_fried_rice</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The chef mkes fried rice&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_special_dish</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The chef makes orange chicken&quot;</span>)<br></code></pre></td></tr></table></figure><p>调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Chef <span class="hljs-keyword">import</span> Chef<br><span class="hljs-keyword">from</span> ChineseChef <span class="hljs-keyword">import</span> ChineseChef<br><br>myChef = Chef()<br>myChef.make_special_dish()<br><br>myChineseChef = ChineseChef()<br>myChineseChef.make_chicken()<br>myChineseChef.make_special_dish()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>矩阵卷积算法</title>
    <link href="/2023/11/10/%E7%9F%A9%E9%98%B5%E5%8D%B7%E7%A7%AF%E7%AE%97%E6%B3%95/"/>
    <url>/2023/11/10/%E7%9F%A9%E9%98%B5%E5%8D%B7%E7%A7%AF%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="矩阵卷积算法"><a href="#矩阵卷积算法" class="headerlink" title="矩阵卷积算法"></a>矩阵卷积算法</h2><h3 id="一、题目说明"><a href="#一、题目说明" class="headerlink" title="一、题目说明"></a>一、题目说明</h3><h4 id="1-1背景"><a href="#1-1背景" class="headerlink" title="1.1背景"></a>1.1背景</h4><p>在遥感图像处理中，经常要进行图像增强、图像滤波、边缘提前等操作，要将原始影像与算子模板进行卷积计算。本题采用文本数据，相关思想可应用于图像处理之中。</p><h4 id="1-2实现步骤"><a href="#1-2实现步骤" class="headerlink" title="1.2实现步骤"></a>1.2实现步骤</h4><p>1.数据文件读取2.算法实现3.保存计算报告</p><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><h4 id="2-1基本元素定义"><a href="#2-1基本元素定义" class="headerlink" title="2.1基本元素定义"></a>2.1基本元素定义</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span>[,] M;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span>[,] N;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Algo</span>(<span class="hljs-params"><span class="hljs-built_in">double</span>[,] M, <span class="hljs-built_in">double</span>[,]N</span>)</span><br>&#123;<br><span class="hljs-keyword">this</span>.M = M;<br><span class="hljs-keyword">this</span>.N = N;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中M和N是文件读取以及计算需要的两个矩阵</p><p>M是3<em>3   N为10</em>10</p><h4 id="2-2算法"><a href="#2-2算法" class="headerlink" title="2.2算法"></a>2.2算法</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 判断Mij的条件</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;i&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;j&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;I&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;J&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">double</span> <span class="hljs-title">JudgeMij</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> j,<span class="hljs-built_in">int</span> I,<span class="hljs-built_in">int</span> J</span>)</span><br>&#123;<br><span class="hljs-built_in">double</span> result=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">int</span> num = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span>(I-i<span class="hljs-number">-1</span>&lt;<span class="hljs-number">0</span>||J-j<span class="hljs-number">-1</span>&lt;<span class="hljs-number">0</span>||I-i<span class="hljs-number">-1</span>&gt;num<span class="hljs-number">-1</span>||J-j<span class="hljs-number">-1</span>&gt;num<span class="hljs-number">-1</span>)<br>&#123;<br>result = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>result = M[i,j];<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 算法一计算V</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;I&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;J&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> <span class="hljs-title">V1</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> I,<span class="hljs-built_in">int</span> J</span>)</span><br>&#123;<br><span class="hljs-built_in">int</span> m = <span class="hljs-number">3</span>;<br><span class="hljs-built_in">int</span> i, j;<br><br><span class="hljs-built_in">double</span> up = <span class="hljs-number">0</span>, down = <span class="hljs-number">0</span>;;<br><span class="hljs-built_in">double</span> mij = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>&#123;<br><span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>;  j &lt; m;  j++)<br>&#123;<br>mij=JudgeMij(i,j,I,J);<br><span class="hljs-built_in">double</span> eps = <span class="hljs-number">1e-10</span>;<br><span class="hljs-keyword">if</span> (Math.Abs(mij) &gt; eps)<br>&#123;<br>up += mij * N[I - i - <span class="hljs-number">1</span>, J - j - <span class="hljs-number">1</span>];<br>down += mij;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> up / down;      <br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span>[,]Algo1()<br>&#123;<br><span class="hljs-built_in">int</span> n = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">double</span>[,] V = <span class="hljs-keyword">new</span> <span class="hljs-built_in">double</span>[n, n];<br><span class="hljs-keyword">for</span> ( <span class="hljs-built_in">int</span> I = <span class="hljs-number">0</span>;I &lt; n;I++)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> J = <span class="hljs-number">0</span>;J&lt; n;J++)<br>&#123;<br>V[I, J] = V1(I, J);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> V;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> <span class="hljs-title">V2</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> I, <span class="hljs-built_in">int</span> J</span>)</span><br>&#123;<br><span class="hljs-built_in">int</span> m = <span class="hljs-number">3</span>;<br><span class="hljs-built_in">int</span> i, j;<br><br><span class="hljs-built_in">double</span> up = <span class="hljs-number">0</span>, down = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">double</span> mij = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>&#123;<br><span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; m; j++)<br>&#123;<br>mij = JudgeMij(i, j, I, J);<br><span class="hljs-built_in">double</span> eps = <span class="hljs-number">1e-10</span>;<br><span class="hljs-keyword">if</span> (Math.Abs(mij) &gt; eps)<br>&#123;<br>up += mij * N[<span class="hljs-number">9</span>-(I - i - <span class="hljs-number">1</span>),<span class="hljs-number">9</span>-( J - j - <span class="hljs-number">1</span>)];<br>down += mij;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> up / down;<br>&#125;<br><span class="hljs-comment">//算法二</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span>[,] Algo2()<br>&#123;<br><span class="hljs-built_in">int</span> n = <span class="hljs-number">10</span>;<br><span class="hljs-built_in">double</span>[,] V = <span class="hljs-keyword">new</span> <span class="hljs-built_in">double</span>[n, n];<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> I = <span class="hljs-number">0</span>; I &lt; n; I++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> J = <span class="hljs-number">0</span>; J &lt; n; J++)<br>&#123;<br>V[I, J] = V2(I, J);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> V;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-3读文件"><a href="#2-3读文件" class="headerlink" title="2.3读文件"></a>2.3读文件</h4><h5 id="2-3-1读取M矩阵文件"><a href="#2-3-1读取M矩阵文件" class="headerlink" title="2.3.1读取M矩阵文件"></a>2.3.1读取M矩阵文件</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> 导入M矩阵ToolStripMenuItem_Click(<span class="hljs-built_in">object</span> sender, EventArgs e)<br>&#123;<br><span class="hljs-keyword">try</span><br>&#123;<br><br>OpenFileDialog opf1 = <span class="hljs-keyword">new</span> OpenFileDialog();<br>opf1.Filter = <span class="hljs-string">&quot;文本文件|*.txt&quot;</span>;<br>opf1.Title = <span class="hljs-string">&quot;请导入M数据文件&quot;</span>;<br><span class="hljs-keyword">if</span> (opf1.ShowDialog() == DialogResult.OK)<br>&#123;<br>StreamReader sr1 = <span class="hljs-keyword">new</span> StreamReader(opf1.FileName);<br><span class="hljs-built_in">string</span> line;<br><span class="hljs-built_in">string</span>[] info;<br><span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br>M = <span class="hljs-keyword">new</span> <span class="hljs-built_in">double</span>[<span class="hljs-number">3</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">while</span> ((line = sr1.ReadLine()) != <span class="hljs-literal">null</span>)<br>&#123;<br><br>info = line.Split(<span class="hljs-string">&#x27;\t&#x27;</span>);<br>M[i, <span class="hljs-number">0</span>] = <span class="hljs-built_in">double</span>.Parse(info[<span class="hljs-number">0</span>]);<br>M[i, <span class="hljs-number">1</span>] = <span class="hljs-built_in">double</span>.Parse(info[<span class="hljs-number">1</span>]);<br>M[i, <span class="hljs-number">2</span>] = <span class="hljs-built_in">double</span>.Parse(info[<span class="hljs-number">2</span>]);<br>i++;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> m = <span class="hljs-number">0</span>; m &lt; <span class="hljs-number">3</span>; m++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> n = <span class="hljs-number">0</span>; n &lt; <span class="hljs-number">3</span>; n++)<br>&#123;<br>Report += M[m, n] + <span class="hljs-string">&quot;\t&quot;</span>;<br>&#125;<br>Report += <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br>richTextBox1.Text = Report;<br>Report = <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex)<br>&#123;<br><span class="hljs-keyword">throw</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-3-2读取N矩阵文件"><a href="#2-3-2读取N矩阵文件" class="headerlink" title="2.3.2读取N矩阵文件"></a>2.3.2读取N矩阵文件</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> 导入N矩阵ToolStripMenuItem_Click(<span class="hljs-built_in">object</span> sender, EventArgs e)<br>&#123;<br><br><span class="hljs-keyword">try</span><br>&#123;<br>OpenFileDialog opf2 = <span class="hljs-keyword">new</span> OpenFileDialog();<br>opf2.Filter = <span class="hljs-string">&quot;文本文件|*.txt&quot;</span>;<br>opf2.Title = <span class="hljs-string">&quot;请导入N数据文件&quot;</span>;<br><span class="hljs-keyword">if</span> (opf2.ShowDialog() == DialogResult.OK)<br>&#123;<br>StreamReader sr2 = <span class="hljs-keyword">new</span> StreamReader(opf2.FileName);<br><span class="hljs-built_in">string</span> line;<br><span class="hljs-built_in">string</span>[] info;<br><span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;<br>N = <span class="hljs-keyword">new</span> <span class="hljs-built_in">double</span>[<span class="hljs-number">10</span>, <span class="hljs-number">10</span>];<br><span class="hljs-keyword">while</span> ((line = sr2.ReadLine()) != <span class="hljs-literal">null</span>)<br>&#123;<br><br>info = line.Split(<span class="hljs-string">&#x27;\t&#x27;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> j = <span class="hljs-number">0</span>; j &lt; info.Length; j++)<br>&#123;<br>N[i, j] = <span class="hljs-built_in">double</span>.Parse(info[j]);<br>&#125;<br>i++;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> m = <span class="hljs-number">0</span>; m &lt; <span class="hljs-number">10</span>; m++)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> n = <span class="hljs-number">0</span>; n &lt; <span class="hljs-number">10</span>; n++)<br>&#123;<br>Report += N[m, n] + <span class="hljs-string">&quot;\t&quot;</span>;<br>&#125;<br>Report += <span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br><br>richTextBox1.Text = Report;<br>Report = <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">catch</span> (Exception ex)<br>&#123;<br><span class="hljs-keyword">throw</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-4保存计算结果"><a href="#2-4保存计算结果" class="headerlink" title="2.4保存计算结果"></a>2.4保存计算结果</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> 保存计算报告ToolStripMenuItem_Click(<span class="hljs-built_in">object</span> sender, EventArgs e)<br>&#123;<br><span class="hljs-keyword">if</span>(V1 != <span class="hljs-literal">null</span>&amp;&amp;V2!=<span class="hljs-literal">null</span>) <br>&#123;<br>SaveFileDialog sav=<span class="hljs-keyword">new</span> SaveFileDialog();<br>sav.Filter = <span class="hljs-string">&quot;文本文件|*.txt&quot;</span>;<br><span class="hljs-keyword">if</span>(sav.ShowDialog() == DialogResult.OK)<br>&#123;<br>StreamWriter sw=<span class="hljs-keyword">new</span> StreamWriter(sav.FileName);<br>sw.Write(Report);<br>sw.Flush();<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> MessageBox.Show(<span class="hljs-string">&quot;请先进行计算&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、数据文件"><a href="#三、数据文件" class="headerlink" title="三、数据文件"></a>三、数据文件</h3><h4 id="3-1读取数据文件"><a href="#3-1读取数据文件" class="headerlink" title="3.1读取数据文件"></a>3.1读取数据文件</h4><h5 id="M文件"><a href="#M文件" class="headerlink" title="M文件"></a>M文件</h5><p>0.200.300.20<br>0.250.500.35<br>0.100.300.20</p><h5 id="N文件"><a href="#N文件" class="headerlink" title="N文件"></a>N文件</h5><p>10.0013.5014.0013.8013.9015.6013.3014.5013.7014.40<br>13.5013.3015.1016.4015.4014.9011.3013.5017.7013.30<br>15.7014.0016.3018.6016.8016.6012.5015.5016.7014.80<br>16.5015.9015.2017.4017.6017.7014.3014.5018.5015.60<br>12.6013.3014.4016.5018.4018.4017.3016.5019.7017.40<br>14.1017.7016.0015.4014.5019.6015.2018.5014.7018.30<br>18.5014.5014.7013.1015.4014.3012.3017.5012.4013.20<br>22.3015.2015.8018.0017.2013.5013.7016.5014.7015.30<br>17.5016.3016.3013.6018.4015.7016.3015.5015.7016.40<br>13.2017.3015.0012.8019.1016.6017.6016.5013.3017.30</p><h4 id="3-2结果文件"><a href="#3-2结果文件" class="headerlink" title="3.2结果文件"></a>3.2结果文件</h4><p>——————————————————–算法1————————————————————<br>NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN<br>NaN10.0011.4012.6413.8013.8914.3614.4614.3013.93<br>NaN11.5612.0713.0314.2514.6114.7614.3313.7813.99<br>NaN13.6613.2913.8315.0015.7815.7214.7113.7414.17<br>NaN15.5915.0714.9515.7316.8616.9815.7014.3314.70<br>NaN14.9415.0214.9515.5616.8517.6017.0115.7315.85<br>NaN13.8514.5114.8215.3716.1017.2717.5216.9516.59<br>NaN15.4315.1715.3015.2515.2315.9616.4316.5216.17<br>NaN19.0817.3416.3815.4015.3415.3015.0614.9915.35<br>NaN19.8618.4616.8915.5015.9415.9715.1914.6415.30<br>———————————————————算法2———————————————————–<br>NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN<br>NaN17.3015.7015.3615.9017.0017.6016.5915.2315.03<br>NaN16.9016.0315.5115.7516.5917.1616.6315.4815.10<br>NaN16.1615.8615.5615.5515.7716.1616.6216.0315.48<br>NaN14.7414.7015.1015.1814.8414.7915.8115.9615.49<br>NaN15.4414.6615.0415.4015.3314.8515.4115.3115.35<br>NaN17.0516.4816.3216.4616.5716.5416.3515.3215.24<br>NaN16.9117.5517.3116.8316.6617.4617.4516.3315.49<br>NaN15.6416.6016.8516.0015.4816.6317.6117.0515.84<br>NaN14.4015.5415.9115.0214.1115.2616.7916.8915.94</p>]]></content>
    
    
    <categories>
      
      <category>测绘程序设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C#</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
